#import dependencies
import numpy
import sys
import nltk
nltk.download('stopwords')
from nltk.tokenize import RegexpTokenizer
from nltk.corpus import stopwords
from keras.models import Sequential
from keras.layers import Dense, Dropot, LSTM
from keras.utils import np_utils
from keras.callbacks import ModelCheckpoint

#load data
file = open("frankenstein-2.txt").read()


#toeknization
#standardization
#Tokenization is the process of breaking a stream of text up into words phrases symbols or other meaningful elements
def tokenize_words(input):
    #lowercase everything to standardise it
    input = input.lower()
    #instantiating the tokenizer
    tokenizer = RegerxpTokenizer(r'\w+')
    #tokenizing the text into tokens
    tokens = tokenizer.toeknize(input)
    #filtering the stopwords using lambda
    filtered = filter(lamda token: token not in stopwords.words('english'),tokens)
    retuen "".john(filtered)
#preprocess the input data
processed_inputs = tokenize_words(file)


#cbars to number
#convert characters in our input to numbers
chars = sorted(list(set(processed_inputs)))
chat-to_num = dict((c,i)for i ,c in enumerate(chars))


#check if words to chars or chars to num has worked
input_len = len(processe_inputs)
vocab_len = len(chars)
print("Total number of characters:", input_len)
print("Total vocab:",vocab_len)


#seq length
seq_length = 100
x_data = []
y_data = []


#loop through the sequence
for i in range(0, input_len - seq_length, 1):
    in_seq = processed_inputs[i:i+seq_length]
    out_seq = processed_inputs[i+seq_length]
    x_data.append([char_to_num[char] for char in in-seq])
    y_data.append(xhar_to_num[out_seq])

n_patterns = len(x_data)
print("Total Patterns:", n_patterns)


#convert input sequence to np array and so on
x = numpy.reshape(x_data, (n_paterns, seq_length, 1))
x = x/float(vocab_len)


#one-hot encoding
y = np_utils.to_categorical(y_data)


#creating the model
model = Sequential()
model.add(LSTM(256, input_shape=(x.shape[1],x.shape[2]),return_sequences = True))
model.add(Dropout(0.2))
model.add(LSTM(256,return_sequences = True))
model.add(Dropout(0.2))
model.add(LSTM(256))
model.add(Dropout(0.2))
model.add(Dense(y.shape[1], activation = 'softmax'))

#compile the model
model.compile(loss='categorical_crossentropy',optimizer = 'adam')

#saving weights
filepath = "model_weights_saved.hdf5"
checkpoint = ModelCheckpoint(filepath, monitor='loss', verbose = 1, save_best_only = True, mode='min')
desired_callbcks = [checkpoint]

#fit model and let it train
model.fit(x,y, epochs=, batch_size=256, callbacks = desired_callbacks)


#recompile the model with the saved weights
filename = "model_weights_saved.hdf5"
model.load_weights(filename)
model.compile(loss='categorical_crossentropy', optimizer='adam')

#output of the model back into characters
num_to_char = dict((c,i)for i ,c in enumerate(chars))

#random seed to help generate
start = numpy.random.randint(0, len(x_data)-1)
pattern = x_data[start]
print("Random Seed:")
print("\".".join([num_to_char[value]for value in pattern]),"\"")


#generate the text
for i in range(1000):
    x = numpy.reshape(pattern, (1,len(pattern),1))
    x = x/float(vocab_len)
    prediction = model.predict(x, verbose = 0)
    index = numpy.argmax(predication)
    result = num_to_char[index]
    seq_in = [num_to_char[value]for value in pattern]
    sys.stdout.write(result)
    pattern.append(index)
    pattern = paattern[1:len(pattern)]

      
    

